//http://enchantjs.com/ja/tutorial/lets-start-enchant-js/#ref_4
enchant();

//当たり判定を取得する関数
function Attack(enemy,x,y,form,push,range,POWER){
	//x,y:当たり判定の中心,form:当たり判定の形,range:円の半径または正方形の辺の1/2

	
	var col = false;
	
	
	//判定の形
	switch (form){
		case 'circle'://円形
			if(Math.sqrt(Math.pow(Math.abs(enemy.x + 75 - x),2) + Math.pow(Math.abs(enemy.y + 75 - y),2)) < range){
				col = true;
			}		
			break;
		
		case 'square'://正方形
			if(Math.abs(enemy.x - x) <  range && Math.abs(enemy.y - y) < range){
				col = true;
			}			
			break;
	}
	
	
	if(col){
		
		if((enemy.x + 75 - x) > 0){
			enemy.x += push;
			enemy.side = 1;
		}else if((enemy.x +75 - x) < 0){
			enemy.x -= push;
			enemy.side = -1;
		}
		
		
		if(enemy.state.charAt(0) != 'D'){
			if(core.mode == 'play')enemy.hp -= POWER;
		}else{
			if(core.mode == 'play')enemy.hp -= POWER-2;
		}
		
		
		enemy.set('attacked');	
		
	}
	
}

//アニメーション
function framePROCESS(state,player,scene){
	console.log('STATE:' + state + '!!!!!!' + player.side);
	
	var FIRSTFRAME;
	var LASTFRAME;
	var ATTACKfrom;
	var ATTACKto;
	var POWER;
	var PUSH = 2;
	var FORM = 'circle'
	var RANGE = 80;
	var REPEAT;
	var repeatcount = 0;
	var SPEED = 1;
	var VELOCITY = 0;
	var speedcount = 1;
	var NEXT;
	var NUM;
	var COM;
	var cando = true;
	
	switch (state){
		
		case 'Aa1':
		
			FIRSTFRAME = 30;
			LASTFRAME = 32;
			ATTACKfrom = 32;
			ATTACKto = 32;
			POWER = 2;
			REPEAT = 1;
			SPEED = 5;
			NEXT = 'Aa2';
			NUM = 4;
			
			break;
			
		case 'Ab1':
		
			FIRSTFRAME = 30;
			LASTFRAME = 32;
			ATTACKfrom = 32;
			ATTACKto = 32;
			POWER = 2;
			REPEAT = 1;
			SPEED = 5;
			NEXT = 'Ab2';
			NUM = 4;
			
			break;
		
		case 'Aa2':
		
			FIRSTFRAME = 33;
			LASTFRAME = 35;
			ATTACKfrom = 35;
			ATTACKto = 35;
			POWER = 3;
			REPEAT = 1;
			SPEED = 4;
			NEXT = 'Aa3';
			NUM = 5;
			
			break;
			
		case 'Ab2':
			
			FIRSTFRAME = 33;
			LASTFRAME = 35;
			ATTACKfrom = 35;
			ATTACKto = 35;
			POWER = 10;
			PUSH = 7;
			REPEAT = 0;
			SPEED = 10;
			NEXT = 'Aa3';
			NUM = 5;
			
			break;
			
		case 'Aa3':
		
			FIRSTFRAME = 36;
			LASTFRAME = 39;
			ATTACKfrom = 36;
			ATTACKto = 39;
			POWER = 7;
			PUSH = 10;
			REPEAT = 1;
			SPEED = 8;
			VELOCITY = 10 * player.side;
			
			break;
			
		case 'Aa4':
		
			FIRSTFRAME = 20;
			LASTFRAME = 22;
			ATTACKfrom = 21;
			ATTACKto = 22;
			RANGE = 40;
			POWER = 3;
			PUSH = 10;
			REPEAT = 20;
			SPEED = 1;
			VELOCITY = -1 * player.side;
			var Y = player.y;
		
			
			break;
			
		case 'Ab4':
		
			FIRSTFRAME = 20;
			LASTFRAME = 22;
			ATTACKfrom = 21;
			ATTACKto = 22;
			RANGE = 38;
			POWER = 3;
			REPEAT = 40;
			SPEED = 1;
			VELOCITY = -7 * player.side;
		
			
			break;
			
		case 'Ab5':
		
			FIRSTFRAME = 20;
			LASTFRAME = 22;
			ATTACKfrom = 21;
			ATTACKto = 22;
			POWER = 10;
			REPEAT = 20;
			SPEED = 1;
			PUSH = 0;
		
			
			break;
			
		case 'attacked':
			
			FIRSTFRAME = 50;
			LASTFRAME = 51;
			REPEAT = 3;
			SPEED = 6;
			if(player.enemy.state == 'Aa3')SPEED = 9;
	
			break;
		
			
		case 'wait':
		
			FIRSTFRAME = 0;
			LASTFRAME = 3;
			REPEAT = 10000;
			SPEED = 20;
			
			break;
		
		case 'Da':
		
			FIRSTFRAME = 15;
			LASTFRAME = 17;
			REPEAT = 15;
		
			break;
			
		case 'escape':
		
			FIRSTFRAME = 60;
			LASTFRAME = 62;
			REPEAT = 5;
			VELOCITY = 10 * player.side;
		
			break;
		
		case 'run':
		
			FIRSTFRAME = 0;
			LASTFRAME = 3;
			REPEAT = 100;
			
			break;
			
		case 'jump':
		
			FIRSTFRAME = 5;
			LASTFRAME = 13;
			REPEAT = 0;
			SPEED = 2;
		
			break;
			
		case 'DEAD':
		
			FIRSTFRAME = 40;
			LASTFRAME = 44;
			REPEAT = 0;
			SPEED = 2;
		
			break;

		
	}
	//プレイヤーの初期フレーム
	
	if(player.dead == false){
		player.frame = FIRSTFRAME;
	}
	
	if(state == 'DEAD'){
		player.dead = true;
	}
	if(state == 'Ab4'){
		player.vy = -20;
		player.Jtimeset(core.time);
	}
	//frameをめくる
	scene.addEventListener('enterframe',Turn);
	
	function Turn(e){
		if(player.dead == true && state != 'DEAD')cando = false;

		if(cando == true){
			
			if(state == 'Aa4'){
				player.y = Y;
				player.Jtimeset(core.time)
				VELOCITY += 0.3 * player.side;
			}
			

			if(state == player.state || state == 'DEAD'){

				if(speedcount >= SPEED){
					speedcount = 1;
					player.frame ++;
					player.x -= VELOCITY;

					if(player.frame <= ATTACKto && player.frame >= ATTACKfrom){
						Attack(player.enemy,player.x + 75 ,player.y + 75,FORM,PUSH,RANGE,POWER);
					}
					if(player.frame > LASTFRAME ){
							if(state == 'DEAD')console.log(player.frame + ':*****' + LASTFRAME);
						if(repeatcount < REPEAT){

							player.frame = FIRSTFRAME;
							repeatcount ++;
						}else{

							if(player.GetCommand()[NUM] == 'A'){

								player.set(NEXT);
								player.next = false;
								cando = false;
							}else{
								if(state != 'DEAD'){
									player.ResetCommand();
									player.frame = 0;
									player.state = 'wait'
									cando = false;
								}else{
									player.frame = 44;
									FIRSTFRAME = 44;
									LASTFRAME = 47;
									SPEED = 10;
									 }
							}
						}
					}
				}else{
					speedcount++;
				}
			}else{
				cando = false;
				
			}
			if(state == 'Ab4'){
				VELOCITY += 0.4 * player.side;
				console.log(cando + 'aaaaaaaaaa')
			}
		}else{}
	}
	
}


 	//ラベル生成関数
function labelcreate(label,color,x,y,scale,opa,scene){
	 label.scale(scale,scale);
	 label.x = x;
	 label.y = y;
	 label.color = color;
	 label.opacity =opa;
     label.font ='HGP創英角ﾎﾟｯﾌﾟ体';
     scene.addChild(label);
}


 	//カウントダウン関数
function countdown(scene){
	var time = 0;
	var count = new Label('');//3sカウントダウン
	labelcreate(count,'#000080',1420,250,8,1,scene);
	var start = new Label('GameStart!');//3sカウントダウン
	labelcreate(start,'#000080',1250,250,8,0,scene);
	scene.addEventListener('enterframe',function(e){

		time++;
		
		if(core.mode == 'countdown'){
				count.text = 3 - Math.floor(time/60);
				if(time/60 >= 3 ){
					core.sparetime = (Math.floor(core.time*10)) / 10;
					scene.removeChild(count);
					start.opacity = 1;
					core.mode = 'play';//GameStart
					core.bgm.play();
				}
		}
		if(time/60 >= 4){
			scene.removeChild(start);
		}
	});
}


	//Playerクラス	
var Player =enchant.Class.create(enchant.Sprite,{
	
	initialize: function(num,chara,scene){
		
		enchant.Sprite.call(this,150,150);
		
			//playerプロパティ
		this.frame = 1;
		var jtime = 0;
		var atime = 0;	
		if(num == 1)this.x = 500;
		if(num == 2)this.x = 150;
		this.scaleX = 0.5;
		this.scaleY = 0.5;
		this.y = 400;
		this.vy= 0;
		this.vx= 0;
		this.hp = 300;
		this.next = false;
		this.side;//右:-1 , 左:+1
		this.enemy;//敵
		this.conflict = false;
		this.state = 'wait';//playerの状態
		this.prestate ;//状態を保存
		this.dead = false;
		
		
		var image;//キャラ画像
		var combo = true; //コンボが可能かどうか
		var falling = false; //落下中かどうか
		var command = new Array(3); //コマンド配列
		var commands; //console.log用
		var com; //console.log用
		var keyon;//最後にキーを押した時間を記録する
		var st = 'wait';//仮state
		var p = this;//player
		var A1,A2,A3,A4;//攻撃コマンド
		
		//初期設定
		switch (chara){
			case 'IWA':
				A1 = 'Aa1';
				A2 = 'Aa2';
				A3 = 'Aa3';
				A4 = 'Aa4';
				D = 'Da'
				image = 'image/iwa.png'
				break;

			case 'PENGUIN':
				A1 = 'Aa1';
				A2 = 'Aa2';
				A3 = 'Aa3';
				A4 = 'Aa4';
				D = 'Da'
				image = 'image/penguin.png';
				break;

			case 'ICHIGOBAKUMAJIRO':
				A1 = 'Ab1';
				A2 = 'Ab2';
				A3 = 'Aa3';
				A4 = 'Ab4';
				D = 'Da'
				image = 'image/IchigoBakuMajiro.png';
				break;
		}
		//キャラクターの画像を設定する
		this.image = core.assets[image];
		
		

		//playerの状態をセットする関数		
		this.set = function(state){
			st = state;
			this.state = state;
			this.prestate = state;
			framePROCESS(state,this,scene);
			keyon = core.time;
		}		
		
		
		//playerのコマンドを取得する関数
		this.GetCommand = function(){
			return command;
		}
		
		
		//playerのコマンドをリセットする関数
		this.ResetCommand = function(){
			command = [];
			this.state = 'wait'
			
		}
		
		
		this.Jtimeset = function(time){
			jtime = time;
			falling = true;
		}
		
		
			//playerに毎フレーム呼ばれるイベントを追加
		this.addEventListener('enterframe',function(e){
			if(this.dead == false){

				//今の状態を保存
				st = this.state;
				if(num == 1 && this.state != 'attacked'){
					

					//左ボタンが押されたら
					if(core.input.left){
						if(this.state == 'Ab4' && !falling){
							command[0] = '←';
							this.side = 1;
						}
						if(this.state.charAt(0) != 'A' && this.state.charAt(0) != 'D'){
							this.vx -= 7;
							command[0] = '←';
							keyon = core.time;
							
						}
					}

					//右ボタンが押されたら
					if(core.input.right){
						if(this.state == 'Ab4' && !falling){
							command[0] = '→';
							this.side = -1;
						}
						if(this.state.charAt(0) != 'A' && this.state.charAt(0) != 'D'){
							this.vx += 7;
							command[0] = '→';
							keyon = core.time;
							
						}
					}

					//上ボタンが押されたら			
					if(core.input.up){
						if(this.state == 'Ab4' && !falling){
							this.vy = -20;
							jtime = core.time;
							falling = true;
						}
						if(this.state.charAt(0) != 'A' && this.state.charAt(0) != 'D'){
							command[2] = '↑';
							if(!falling){	
								this.vy = -30;
								st = 'jump';
								jtime = core.time;//jumpした時間
								falling = true;//落下処理
							}
							keyon = core.time;
						}
					}

					//下ボタンが押されたら
					if(core.input.down){
						command[2] = '↓';
						keyon = core.time;
					}

					//攻撃ボタンを押されたら
					if(core.input.e){
						if(combo == true){
							if(command[3] == 'A'){
								if(command[4] == 'A'){
									command[5] = 'A';
								}else{
								command[4] = 'A';
								}
							}else{
								command[3] = 'A';
								if(command[0] == '←' || command[0] == '→'){
									st = A4;
								}else{
									st = A1;
								}							
							}
							keyon = core.time;
							combo = false;
						}

					}

					//防御ボタンを押されたら
					if(core.input.z){
						if(this.state.charAt(0) != 'A'){
							keyon = core.time;
							if(combo == true){
								command[0] = 'D';
								combo = false;
							}
						}
					}

					//player2のボタン処理
				}else if(num == 2 && this.state != 'attacked'){


					//左ボタンが押されたら
					if(core.input.a){
						if(this.state == 'Ab4' && !falling){
							command[0] = '←';
							this.side = 1;
						}
						if(this.state.charAt(0) != 'A' && this.state.charAt(0) != 'D'){
							this.vx -= 7;
							command[0] = '←';
							keyon = core.time;
							
							}
						}
					


					//右ボタンが押されたら
					if(core.input.d){
						if(this.state == 'Ab4' && !falling){
							command[0] = '→';
							this.side = -1;
						}
						if(this.state.charAt(0) != 'A' && this.state.charAt(0) != 'D'){
							this.vx += 7;
							command[0] = '→';
							keyon = core.time;
							
						}
					}


					//上ボタンが押されたら			
					if(core.input.w){
						if(this.state == 'Ab4' && !falling){
							this.vy = -20;
							jtime = core.time;
							falling = true;
						}
						if(this.state.charAt(0) != 'A' && this.state.charAt(0) != 'D'){
							command[2] = '↑';
							if(!falling){	
								this.vy = -30;
								st = 'jump';
								jtime = core.time;//jumpした時間
								falling = true;//落下処理
							}
							keyon = core.time;
						}
					}


					//下ボタンを押されたら
					if(core.input.s){
						if(combo == true){
							command[2] = '↓';
							keyon = core.time;
							combo = false;
						}
					}


					//攻撃ボタンを押されたら
					if(core.input.g){
						if(combo == true){
							if(command[3] == 'A'){
								if(command[4] == 'A'){
									command[5] = 'A';
								}else{
								command[4] = 'A';
								}
							}else{
								command[3] = 'A'
								if(command[0] == '←' || command[0] == '→'){
									st = A4;						
								}else{
									st = A1;
								}				
							}
							keyon = core.time;
							combo = false;
						}					
					}


					//防御ボタンを押されたら
					if(core.input.f){
						if(this.state.charAt(0) != 'A'){
							keyon = core.time;
							if(combo == true){
								command[0] = 'D';
								combo = false;
							}
						}
					}
				}


				if((core.time - keyon) > 0.5)command =[];


				commands = command.join(':');
				if(com != commands){
					//console.log(num + ':' + commands);
				}
				com = commands;


				if(command[0] == ''){
					//st = 'wait';
				}


				if(command[0] == '←'){
					this.side = 1;
					if(st == 'wait'){
						st = 'run';
					}
				}


				if(command[0] == '→'){
					this.side = -1;
					if(st == 'wait'){
						st = 'run';
					}				
				}


				if(command[0] == 'D'){
					st = D;
					if((core.input.left && num == 1 )|| (core.input.a && num == 2)){
						this.side = 1;
						command[0] = '';
						st = 'escape';
					}
					if((core.input.right && num == 1 )|| (core.input.d && num == 2)){
						this.side = -1;
						command[0] = '';
						st = 'escape';
					}
				}


				if(command[2] == '↑'){

				}


				if(command[2] == '↓'){

				}


				if(command[3] == 'A'){
					if(command[5] == 'A' && this.state == A2){
						this.next = true;
					}else if(command[4] == 'A' && this.state == A1){
						this.next = true;					
					}
				}


				
				this.vy += 15 * (core.time - jtime);
				


					//移動処理
				this.scaleX = 0.5 * this.side;
				this.y += this.vy;
				this.x += this.vx;
				if(this.conflict && Math.abs(this.vx)>5)this.x += (-this.vx/ Math.abs(this.vx))*8;
				this.vx = 0;


					//地面の設定
				if(this.y >= 400){
					this.y = 400;
					this.vy = 0;
					jtime = 0;
					if(this.state == 'jump')st = 'wait';
					falling = false;
				}


					//壁の設定
				//if(this.x > 650)this.x = 650;
				if(this.x > 690)this.x = 690;
				//if(this.x < -80 )this.x = -80;
				if(this.x < -40 )this.x = -40;

				if(Math.abs(this.x - this.enemy.x) < 60 && Math.abs(this.y - this.enemy.y) < 70){
					this.conflict = true;
				}else{
					this.conflict = false;
				}
				this.state = st;

				if(this.prestate != this.state && this.state != 'DEAD'){
					framePROCESS(this.state,this,scene);
					this.prestate = this.state;
				}
			}
		});
		
		
			
			if(num == 1){
				scene.addEventListener('ebuttonup', function(e) {
							combo = true;
					});	
				scene.addEventListener('leftbuttonup', function(e) {
							command[0] ='' ;
							if(p.state == 'run')p.state = 'wait';
					});	
				scene.addEventListener('rightbuttonup', function(e) {
							command[0] ='' ;
							if(p.state == 'run')p.state = 'wait';
					});	
				scene.addEventListener('upbuttonup', function(e) {
							command[2] ='' ;
					});	
				scene.addEventListener('downbuttonup', function(e) {
							command[2] ='' ;
					});	
				scene.addEventListener('zbuttonup', function(e) {
							command[0] ='' ;
							combo = true;
					});	
			}else if(num == 2){
				scene.addEventListener('gbuttonup', function(e) {
							combo = true;
					});	
				scene.addEventListener('abuttonup', function(e) {
							command[0] ='' ;
							if(p.state == 'run')p.state = 'wait';
					});	
				scene.addEventListener('wbuttonup', function(e) {
							command[2] ='' ;
					});	
				scene.addEventListener('sbuttonup', function(e) {
							command[2] ='' ;
					});	
				scene.addEventListener('dbuttonup', function(e) {
							command[0] ='' ;
							if(p.state == 'run')p.state = 'wait';
					});	
				scene.addEventListener('fbuttonup', function(e) {
							command[0] ='' ;
							combo = true;
					});	
			}
		

		    	//playerをシーンに配置
			scene.addChild(this);
		}	
});
//ウィンドウが開いたら
window.onload = function() {
	
 //core = new Game(320, 240);
  core = new Core(800,576);
	
	
  	//変数の宣言
  core.fps = 40;
  core.six = 0;
  core.time = 0;
  core.sparetime = 0;
  core.mode = 'pre';
  core.preload('image/penguin.png','image/stage.jpg','image/num.png','image/plate.png','image/GRAPPLE.png','image/gauge.png','image/world.png','image/chara.png','image/iwa.png','戦闘用BGM.wav','image/apple.png','image/IchigoBakuMajiro.png','image/steam.png','image/haguruma.png','image/ha.png','image/ha1.png','image/serect.png','image/old.png');
  core.bgm = Sound.load('戦闘用BGM.wav');
  core.atime = 0;
  core.frame = 0;
 
	
  	//ゲームが始まったら
  core.onload = function() {
	  
	  
	core.bgm.volume = 0.5;
	  
	  
		//タイトルシーン
	var title = new Label('SPACE de START');
	labelcreate(title,'#0000FF',100,100,1.2,1,core.rootScene);
	TITLE = new Sprite(1600,800);
	TITLE.image = core.assets['image/GRAPPLE.png'];
	core.rootScene.addChild(TITLE);
	  
	 
    	//タイトルシーン→バトルシーン
	core.rootScene.addEventListener('touchstart', function(e) {
		 	//バトルシーンへ移行
		 core.pushScene(core.SerectScene());
	});

	  
	  
	core.rootScene.addEventListener('bbuttondown', function(e) {
	 	//バトルシーンへ移行
		 core.pushScene(core.SerectScene());
	});
	  
	  
		//keycodeの割り当て
	core.keybind(32,'b');//Space:決定
	core.keybind(71,'g');//G:攻撃
	core.keybind(191,'e');//?:攻撃
	core.keybind(190,'z');//>:防御
	core.keybind(70,'f');//F:防御
	core.keybind(65,'a');//A:左
	core.keybind(83,'s');//S:下
	core.keybind(68,'d');//D:右
	core.keybind(87,'w');//W:上

	
 		//バトルシーンの生成関数
	core.SerectScene = function(){
		
		var serectScene = new Scene();

		var num1 = 1;
		var num2 = 1;
 		var num3 = 1;		
		var ok1 = true;
		var ok2 = true;
		serect1 = false;
		serect2 = false;
		serect3 = false;
		stageserect = false;

		background = new Sprite(800,576);
		background.image = core.assets['image/old.png'];
		serectScene.addChild(background);


		apple1 = new Sprite(100,100);
		apple1.image = core.assets['image/ha1.png'];
		apple1.x = 400;
		apple1.y = 300;
		serectScene.addChild(apple1);

		apple2 = new Sprite(100,100);
		apple2.image = core.assets['image/ha1.png'];
		apple2.x = 400;
		apple2.y = 450;
		serectScene.addChild(apple2);
		
		apple3 = new Sprite(100,100);
		apple3.image = core.assets['image/ha1.png'];
		apple3.x = 400;
		apple3.y = 150;
		serectScene.addChild(apple3);


		serectScene.addEventListener('rightbuttondown',function(e){
			if(ok1 && serect1 == false){
				num1 ++;
				if(num1 > 3)num1 = 1;
			}
			if(ok1 && stageserect && !serect3){
				num3 ++;
				if(num3 > 3)num3 = 1;
			}
			ok1 = false;
		});
		serectScene.addEventListener('leftbuttondown',function(e){
			if(ok1 && serect1 == false){
				num1 --;
				if(num1 < 1)num1 = 3;
			}
			if(ok1 && stageserect && !serect3){
				num3 --;
				if(num3 < 1)num3 = 3;
			}
			ok1 = false;
		});

		serectScene.addEventListener('rightbuttonup',function(e){
			ok1 = true;
		});
		serectScene.addEventListener('leftbuttonup',function(e){
			ok1 = true;
		});
		serectScene.addEventListener('ebuttondown',function(e){
			
			if(stageserect){
				serect3 = true;
				apple3.frame = 2;
			}else{
				serect1 = true;
				apple1.frame = 1;
			}
		});
		serectScene.addEventListener('zbuttondown',function(e){
			if(stageserect){
				serect3 = false;
				apple3.frame = 0;
			}else{
				serect1 = false;
				apple1.frame = 0;
			}
		});




		serectScene.addEventListener('dbuttondown',function(e){
			if(ok2 && serect2 == false){
				num2 ++;
				if(num2 > 3)num2 = 1;
			}
			ok2 = false;
		});
		serectScene.addEventListener('abuttondown',function(e){
			if(ok2 && serect2 == false){
				num2 --;
				if(num2 < 1)num2 = 3;
			}
			ok2 = false;
		});

		serectScene.addEventListener('dbuttonup',function(e){
			ok2 = true;
		});
		serectScene.addEventListener('abuttonup',function(e){
			ok2 = true;
		});
		serectScene.addEventListener('gbuttondown',function(e){
			serect2 = true;
			apple2.frame = 1;
		});
		serectScene.addEventListener('fbuttondown',function(e){
			if(!stageserect){
				serect2 = false;
				apple2.frame = 0;
			}
		});


		serectScene.addEventListener('enterframe',function(e){
			
			
			apple1.x = num1 * 200;
			apple2.x = num2 * 200;
			apple3.x = num3 * 200;

			if(serect1 && serect2 && core.input.b){
				stageserect = true;
				apple1.frame = 2;
				apple2.frame = 2;
			}
			
			if(serect3 && core.input.b)core.pushScene(core.BattleScene(num1,num2,num3));
		});


		return serectScene;	
		
	}
				
	core.BattleScene = function(num1,num2,num3){

		var chara1,chara2,stage;

		switch(num1){
			case 1:
				chara1 = 'IWA';
				break;

			case 2:
				chara1 = 'ICHIGOBAKUMAJIRO';
				break;

			case 3:
				chara1 = 'PENGUIN'
				break;
		}
		
		switch(num2){
			case 1:
				chara2 = 'IWA';
				break;

			case 2:
				chara2 = 'ICHIGOBAKUMAJIRO';
				break;

			case 3:
				chara2 = 'PENGUIN'
				break;
		}
		
		switch(num3){
			case 1:
				stage = 'image/world.png';
				break;

			case 2:
				stage = 'image/stage.jpg';
				break;

			case 3:
				stage = 'image/steam.png';
				break;
		}

					//バトルシーンの宣言
		var battleScene = new Scene();


			//背景の設定
		background = new Sprite(800,576);
		background.image = core.assets[stage];
		battleScene.addChild(background);
		
		

		//HPゲージの設定
		gauge1 = new Sprite(340,50);
		gauge1.image = core.assets['image/gauge.png'];
		gauge1.x = 450;
		gauge1.y = 80;
		battleScene.addChild(gauge1);

		gauge2 = new Sprite(340,50);
		gauge2.image = core.assets['image/gauge.png'];
		gauge2.x = 10;
		gauge2.y = 80;
		gauge2.rotation = 180;
		battleScene.addChild(gauge2);


		plate1 = new Sprite(340,50);
		plate1.image = core.assets['image/plate.png'];
		plate1.x = 450;
		plate1.y = 80;
		battleScene.addChild(plate1);

		plate2 = new Sprite(340,50);
		plate2.image = core.assets['image/plate.png'];
		plate2.x = 10;
		plate2.y = 80;
		plate2.scaleX = -1;
		battleScene.addChild(plate2);
		
		timeback = new Sprite(100,100);
		timeback.image = core.assets['image/ha1.png'];
		timeback.x = 350;
		timeback.y = 70;
		timeback.frame = 1;
		battleScene.addChild(timeback);


		timeten = new Sprite(40,40);
		timeten.image = core.assets['image/num.png'];
		timeten.x = 360;
		timeten.y = 100;
		timeten.frame = 6;
		battleScene.addChild(timeten);

		timeone = new Sprite(40,40);
		timeone.image = core.assets['image/num.png'];
		timeone.x = 400;
		timeone.y = 100;
		timeone.frame = 0;
		battleScene.addChild(timeone);


			//playerの配置
		var player1 = new Player(1,chara1,battleScene);//player1 
		var player2 = new Player(2,chara2,battleScene);//player2
		player1.tl.fadeOut(10).fadeIn(10).fadeOut(10).fadeIn(10).fadeOut(10).show();
		player2.tl.fadeOut(10).fadeIn(10).fadeOut(10).fadeIn(10).fadeOut(10).show();
		player1.enemy = player2;
		player1.side = 1;
		player2.enemy = player1;
		player2.side = -1;


			//Labelの配置  labelcreate(label,color,x,y,scale,opa,scene)
		var sign = new Label('K.O.');
		labelcreate(sign,'#DC143C',1380,250,8,0,battleScene);


		battleScene.addEventListener('bbuttondown', function(e) {

				if(core.mode == 'pre'){
					 countdown(battleScene);
					 core.mode = 'countdown';
				}
				if(core.mode == 'finish'){
					core.pushScene(core.rootScene);
					core.mode = 'pre';
				}
			});


			//バトルシーンにイベントを追加
		battleScene.addEventListener('enterframe', function(e) {


							//0.1秒ごとに時間を更新
			if(core.six ==5)core.time += 0.1;
			 core.six = (core.six + 1) % 6;


				//playモード
			if(core.mode == 'play'){


					//時間制限こカウントダウン
				 if((Math.floor(core.time*10) % 10) == 0){
					 timeten.frame = Math.floor(Math.floor(60 + core.sparetime - (Math.floor(core.time*10)) / 10)/10);
					 timeone.frame =  Math.floor(60 + core.sparetime - (Math.floor(core.time*10)) / 10) % 10;
				 }


					//制限時間終了
				 if(core.time >= 60 + core.sparetime){

					 sign.opacity = 1;
					 sign.text = 'TIME UP!';
					 core.mode = 'finish';
					 timeten.frame = 0;
					 timeone.frame = 0;
				 } 
				gauge1.width = (player1.hp / 300) * 340;
				gauge2.width = (player2.hp / 300) * 340;
				gauge2.x = 350 -(player2.hp / 300) * 340
				
				
					//player2の勝ち
				 if(player1.hp <= 0 && core.mode == 'play'){

					 framePROCESS('DEAD',player1,battleScene);
					 gauge1.opacity = 0;
					 sign.opacity = 1;
					 timeten.frame = 0;
					 timeone.frame = 0;
					 core.mode = 'finish';
				 }　　


					//player１の勝ち
				 if(player2.hp <= 0 && core.mode == 'play'){

					 framePROCESS('DEAD',player2,battleScene);
					 gauge2.opacity = 0;
					 sign.opacity = 1;
					 timeten.frame = 0;
					 timeone.frame = 0;
					 core.mode = 'finish';
				 }
			}

		});


		return battleScene;

	}
		
	}
  
  
  
  core.start();//ゲームスタート！	
}